// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/nmmugia/marvel-character/models"
	mock "github.com/stretchr/testify/mock"

	types "github.com/jmoiron/sqlx/types"
)

// CharacterUsecase is an autogenerated mock type for the CharacterUsecase type
type CharacterUsecase struct {
	mock.Mock
}

// GetAllDataByCache provides a mock function with given fields:
func (_m *CharacterUsecase) GetAllDataByCache() models.Errorx {
	ret := _m.Called()

	var r0 models.Errorx
	if rf, ok := ret.Get(0).(func() models.Errorx); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Errorx)
	}

	return r0
}

// GetCharacterByIDs provides a mock function with given fields: ids
func (_m *CharacterUsecase) GetCharacterByIDs(ids string) (types.JSONText, models.Errorx) {
	ret := _m.Called(ids)

	var r0 types.JSONText
	if rf, ok := ret.Get(0).(func(string) types.JSONText); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.JSONText)
		}
	}

	var r1 models.Errorx
	if rf, ok := ret.Get(1).(func(string) models.Errorx); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Get(1).(models.Errorx)
	}

	return r0, r1
}

// GetCharacters provides a mock function with given fields: param
func (_m *CharacterUsecase) GetCharacters(param models.GetCharactersParam) (types.JSONText, models.Errorx) {
	ret := _m.Called(param)

	var r0 types.JSONText
	if rf, ok := ret.Get(0).(func(models.GetCharactersParam) types.JSONText); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.JSONText)
		}
	}

	var r1 models.Errorx
	if rf, ok := ret.Get(1).(func(models.GetCharactersParam) models.Errorx); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Get(1).(models.Errorx)
	}

	return r0, r1
}
